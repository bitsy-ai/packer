# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.

locals {
  DATESTAMP = formatdate("YYYY-MM-DD-hhmm", timestamp())
  # Also here I believe naming this variable `buildtime` could lead to 
  # confusion mainly because this is evaluated a 'parsing-time'.
}

variable "RELEASE_CHANNEL" {
  type    = string
  default = "main"
}

variable "PRINTNANNY_CLI_VERSION" {
    type = string
}

variable "OCTOPRINT_VERSION" {
    type = string
}

variable "JANUS_VERSION" {
    type = string
}

variable "JANUS_USRSCTP_VERSION" {
    type = string
}

variable "JANUS_LIBNICE_VERSION" {
    type = string
}

variable "JANUS_LIBSRTP_VERSION" {
    type = string
}

variable "JANUS_WEBSOCKETS_VERSION" {
    type = string
}

variable "PRINTNANNY_USER" {
  type = string
  default = "printnanny"
}

variable "PRINTNANNY_GROUP" {
  type = string
  default = "printnanny"
}

variable "OCTOPRINT_USER" {
  type = string
  default = "octoprint"
}

variable "OCTOPRINT_GROUP" {
  type = string
  default = "octoprint"
}

variable "BASE_DISTRO_VERSION" {
  type = string
}
variable "BASE_IMAGE_URL" {
  type = string
}

variable "BASE_IMAGE_CHECKSUM" {
    type = string
}

variable "BASE_IMAGE_EXT" {
    type = string
    default = "zip"
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "arm" "print_nanny" {
  file_checksum_type    = "sha256"
  file_checksum_url     = "${var.BASE_IMAGE_CHECKSUM}"
  file_target_extension = "${var.BASE_IMAGE_EXT}"
  file_urls             = [
      "${var.BASE_IMAGE_URL}"
    ]
  image_build_method    = "resize"
// override chroot environment variables
// image_chroot_env      = ["PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin"]
  image_mount_path      = "/tmp/rpi_chroot"

  image_partitions {
    filesystem   = "vfat"
    mountpoint   = "/boot"
    name         = "boot"
    size         = "256M"
    start_sector = "8192"
    type         = "c"
  }
  image_partitions {
    filesystem   = "ext4"
    mountpoint   = "/"
    name         = "root"
    size         = "0"
    start_sector = "532480"
    type         = "83"
  }
  image_path                   = "dist/printnanny-pi.img"
  image_size                   = "6G"
  image_type                   = "dos"
  qemu_binary_destination_path = "/usr/bin/qemu-arm-static"
  qemu_binary_source_path      = "/usr/bin/qemu-arm-static"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.arm.print_nanny"]

  provisioner "shell" {
    inline = ["touch /boot/ssh"]
  }

  provisioner "shell" {
    inline = [
        "DEBIAN_FRONTEND=noninteractive apt-get -y update",
        "DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade --force-yes",
        "DEBIAN_FRONTEND=noninteractive apt-get clean"
    ]
    pause_before = "60s"
    timeout      = "800s"
  }

  provisioner "ansible" {
    extra_arguments = [
        "--extra-vars", "printnanny_release_channel=${var.RELEASE_CHANNEL}",
        "--extra-vars", "printnanny_cli_version=${var.PRINTNANNY_CLI_VERSION}",
        "--extra-vars", "octoprint_version=${var.OCTOPRINT_VERSION}",
        "--extra-vars", "octoprint_user=${var.OCTOPRINT_USER}",
        "--extra-vars", "octoprint_group=${var.OCTOPRINT_GROUP}",
        "--extra-vars", "printnanny_user=${var.PRINTNANNY_USER}",
        "--extra-vars", "printnanny_group=${var.PRINTNANNY_GROUP}",
        "--extra-vars", "janus_version=${var.JANUS_VERSION}",
        "--extra-vars", "janus_usrsctp_version=${var.JANUS_USRSCTP_VERSION}",
        "--extra-vars", "janus_libnice_version=${var.JANUS_LIBNICE_VERSION}",
        "--extra-vars", "janus_libsrtp_version=${var.JANUS_LIBSRTP_VERSION}",
        "--extra-vars", "janus_websockets_version=${var.JANUS_WEBSOCKETS_VERSION}",
    ]
    inventory_file_template = "default ansible_host=/tmp/rpi_chroot ansible_connection=chroot\n"
    galaxy_file     = "./playbooks/requirements.yml"
    playbook_file   = "./playbooks/printnanny.yml"
  }

  post-processor "checksum" {
    checksum_types = ["sha1", "sha256"]
    output = "dist/{{.ChecksumType}}.checksum"
  }

  post-processor "manifest" {
    output     = "dist/manifest.json"
    strip_path = true
    strip_time = true
    custom_data = {
      image_path = "${local.DATESTAMP}-print-nanny-${var.RELEASE_CHANNEL}-${var.BASE_DISTRO_VERSION}"
      image_name = "$printnanny-pi.img"
      release_channel = "${var.RELEASE_CHANNEL}"
      datestamp = "${local.DATESTAMP}"
      base_distro_version = "${var.BASE_DISTRO_VERSION}"
      base_image_checksum = "${var.BASE_IMAGE_CHECKSUM}"
      base_image_ext = "${var.BASE_IMAGE_EXT}"
      base_image_url = "${var.BASE_IMAGE_URL}"

      printnanny_cli_version = "${var.PRINTNANNY_CLI_VERSION}"
      octoprint_version = "${var.OCTOPRINT_VERSION}"
      janus_version = "${var.JANUS_VERSION}"
      janus_usrsctp_version = "${var.JANUS_USRSCTP_VERSION}"
      janus_libnice_version = "${var.JANUS_LIBNICE_VERSION}"
      janus_libsrtp_version = "${var.JANUS_LIBSRTP_VERSION}"
      janus_websockets_version = "${var.JANUS_WEBSOCKETS_VERSION}"
    }
  }

  post-processor "compress" {
    output = "dist/${local.DATESTAMP}-print-nanny-${var.RELEASE_CHANNEL}-${var.BASE_DISTRO_VERSION}.zip"
  }

}
