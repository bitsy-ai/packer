on:
  workflow_dispatch:
    inputs:
      RELEASE_CHANNEL:
        description: 'Publish image to release channel: (nightly, stable)'     
        required: true
        default: 'nightly'
env:
  GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.PACKER_SERVICE_ACCOUNT_KEY }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.PACKER_SERVICE_ACCOUNT }}
  GCP_BUCKET: print-nanny-cdn
  CDN_BASE_URL: https://cdn.print-nanny.com

jobs:
  # begin image job
  image:
    strategy:
      fail-fast: false
      matrix:
        os: [ buster, bullseye ]
        arch: [ arm64 ]
        include:
          - image_name: generic-pi-buster-arm64
            base_image: 2021-05-07-raspios-buster-arm64
            template_file: templates/generic-pi.pkr.hcl
            packer_var_file: vars/generic-pi-buster-arm64.pkrvars.hcl
            ansible_extra_vars: vars/generic-pi-arm64.ansiblevars.yml
            arch: arm64
            os: buster
            platform: debian

          - image_name: generic-pi-bullseye-arm64
            base_image: 2021-10-30-raspios-bullseye-arm64
            template_file: templates/generic-pi.pkr.hcl
            packer_var_file: vars/generic-pi-bullseye-arm64.pkrvars.hcl
            ansible_extra_vars: vars/generic-pi-arm64.ansiblevars.yml
            arch: arm64
            os: bullseye
            platform: debian

    runs-on: ubuntu-latest
    steps:
    - name: Install platform deps
      run: sudo apt-get install -y jq wget
    - name: Checkout branch
      uses: actions/checkout@v2
    - name: Ensure ansible_extra_vars on disk
      run: make ${{ matrix.ansible_extra_vars }}
    - name: Make base image
      id: packer
      run: |
        make dist/${{ matrix.image_name}}.img \
          PACKER_VAR_FILE=${{ matrix.packer_var_file }} \
          IMAGE_NAME=${{ matrix.image_name}} \
          PACKER_TEMPLATE_FILE=${{ matrix.template_file }} \
          ANSIBLE_EXTRA_VARS=${{ matrix.ansible_extra_vars }}
        
        ls -ahl dist/

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.image_name }}-dist
        path: dist/
  # end image job
  # begin publish job
  publish-nightly:
    # github action inputs are always strings
    environment: nightly
    needs: [image]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name:
          - generic-pi-buster-arm64
          - generic-pi-bullseye-arm64
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.image_name }}-dist
          path: dist/
          if-no-files-found: error
      - name: Set output vars
        id: artifact
        run: |
          echo ::set-output name=image_name::"$(cat dist/manifest.json | jq '.builds[-1].custom_data.image_name')"
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.PRINT_NANNY_DISCORD_DEPLOY_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: |
            ðŸ§ª NEW nightly `${{ steps.artifact.outputs.image_name }}`
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
  publish-stable:
    # github action inputs are always strings
    environment: stable
    needs: [image, publish-nightly]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_name:
          - generic-pi-buster-arm64
          - generic-pi-bullseye-arm64
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.image_name }}-dist
          path: dist/
      - name: Write deploy key
        run: echo $GCP_SERVICE_ACCOUNT_KEY > key.json
      - name: Activate Service Account
        run: gcloud auth activate-service-account $GCP_SERVICE_ACCOUNT --key-file=key.json
      # packer-builder-arm does not support file:// URI
      # so downstream builds must consume https://cdn url
      - name: Set output Packer vars
        id: packer
        run: |
          mkdir -p output-env/

          export IMAGE_NAME=$(cat dist/manifest.json | jq '.builds[-1].custom_data.image_name')
          export IMAGE_PATH=$(cat dist/manifest.json | jq '.builds[-1].custom_data.image_path')
          export IMAGE_URL=${{ format('{0}/{1}/{2}', env.CDN_BASE_URL, env.IMAGE_PATH, env.IMAGE_NAME ) }}
          export CHECKSUM_URL=${{ format('{0}/{1}/sha256.checksum', env.CDN_BASE_URL, env.IMAGE_PATH ) }}
          export MANIFEST_URL="${{ format('{0}/{1}/manifest.json', env.CDN_BASE_URL, env.IMAGE_PATH)}}

          cat << EOF > output-env/${{ matrix.image_name }}.sh
          #!/usr/bin/env bash
          export IMAGE_PATH="$IMAGE_PATH"

          export BASE_IMAGE_NAME=$IMAGE_NAME
          export PKR_VAR_base_image_name=$IMAGE_NAME
          
          export IMAGE_URL="$IMAGE_URL"
          export PKR_VAR_base_image_url="$IMAGE_URL"

          export CHECKSUM_URL="$CHECKSUM_URL"
          export PKR_VAR_base_image_checksum="$CHECKSUM_URL"

          export MANIFEST_URL="$MANIFEST_URL"
          export PKR_VAR_base_manifest_url="$MANIFEST_URL"
          EOF

          cat << EOF > output-env/${{ matrix.image_name }}.env
          IMAGE_PATH="$IMAGE_PATH"

          BASE_IMAGE_NAME="$IMAGE_NAME"
          PKR_VAR_base_image_name="$IMAGE_NAME"
          
          IMAGE_URL="$IMAGE_URL"
          PKR_VAR_base_image_url="$IMAGE_URL"

          CHECKSUM_URL="$CHECKSUM_URL"
          PKR_VAR_base_image_checksum="$CHECKSUM_URL"

          MANIFEST_URL="$MANIFEST_URL"
          PKR_VAR_base_manifest_url="$MANIFEST_URL"
          EOF

          echo "Created $(ls output-env/) for downstream workflows"
          cat output-env/${{ matrix.image_name }}.env

          echo ::set-output name=image_name::"$IMAGE_NAME"
          echo ::set-output name=image_path::"$IMAGE_PATH"
          echo ::set-output name=image_url::"$IMAGE_URL"
          echo ::set-output name=checksum_url::"$CHECKSUM_URL"
          echo ::set-output name=manifest_url::"$MANIFEST_URL"

      # retain published urls as automatic packer vars
      # from: https://www.packer.io/guides/hcl/variables
      # Packer will automatically load any var file that matches the name *.auto.pkrvars.hcl, without the need to pass the file via the command line.
      # intended for use with: https://github.com/dawidd6/action-download-artifact
      # packer-builder-arm does not support file:// uri, so published cdn urls must be passed as packer vars for next workflow stage
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.image_name }}-output-env
          path: output-env/
      - name: Upload to GCP_BUCKET
        run: |
          gsutil rsync -r dist/ gs://$GCP_BUCKET/${{ steps.packer.outputs.image_path }}/
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.PRINT_NANNY_DISCORD_DEPLOY_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: |
            ðŸš€ Published `${{ steps.packer.outputs.image_name }}`
            [Download](${{ steps.packer.outputs.image_url }})
            [Manifest](${{ steps.packer.outputs.manifest_url }})
            [Checksum](${{ steps.packer.outputs.checksum_url }})
