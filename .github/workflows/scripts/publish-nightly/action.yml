name: 'Publish image to CDN'
description: 'Publish image to CDN via gsutils'
inputs:
  DISCORD_WEBHOOK:
    description: 'Publish using Discord webhook'
    required: true
  IMAGE_NAME:
    description: 'Name of image to build'
    required: true

runs:
  using: "composite"
  steps:
  - uses: actions/download-artifact@v2
    with:
      name: ${{ inputs.image_name }}
      path: dist
  - name: Write deploy key
    shell: bash
    run: echo $GCP_SERVICE_ACCOUNT_KEY > key.json
  - name: Activate Service Account
    shell: bash
    run: gcloud auth activate-service-account $GCP_SERVICE_ACCOUNT --key-file=key.json
  - name: Create environment artifacts
    id: packer
    shell: bash
    run: |
      ls dist/
      . dist/${{ inputs.image_name }}.sh
      echo ::set-output name=image_filename::"$IMAGE_FILENAME"
      echo ::set-output name=image_stamp::"$IMAGE_STAMP"
      echo ::set-output name=image_name::"$IMAGE_NAME"
      echo ::set-output name=image_path::"$IMAGE_PATH"
      echo ::set-output name=image_url::"$IMAGE_URL"
      echo ::set-output name=checksum::"$CHECKSUM"
      echo ::set-output name=checksum_url::"$CHECKSUM_URL"
      echo ::set-output name=manifest_url::"$MANIFEST_URL"
      echo ::set-output name=sig_url::"$SIG_URL"

  - name: Publish nightly releases
    shell: bash
    id: release
    env:
      IMAGE_VARIANT: ${{ inputs.IMAGE_VARIANT }}
      IMAGE_FILENAME: ${{ steps.packer.outputs.image_filename }}
      IMAGE_URL: ${{ steps.packer.outputs.image_url }}
      CHECKSUM: ${{ steps.packer.outputs.checksum }}
      CHECKSUM_URL: ${{ steps.packer.outputs.checksum_url }}
      MANIFEST_URL: ${{ steps.packer.outputs.manifest_url }}
      SIG_URL: ${{ steps.packer.outputs.manifest_url }}
    run: |
      gsutil rsync -r dist/ gs://$GCP_BUCKET/${{ steps.packer.outputs.image_path }}/
      res=$(PRINTNANNY_API_URL="${{ inputs.SANDBOX_API_URL }}" PRINTNANNY_API_TOKEN=${{ inputs.SANDBOX_API_TOKEN }} ./tools/nightly-release.sh)
      echo "Published to ${{ inputs.SANDBOX_API_URL }}"
      echo "$res"
    # TODO enable after prod rollout
    # res=$(PRINTNANNY_API_URL="${{ inputs.PROD_API_URL }}" PRINTNANNY_API_TOKEN=${{ inputs.PROD_API_TOKEN }} ./tools/nightly-release.sh)
    # echo "Published to ${{ inputs.PROD_API_URL }}"
    # echo "$res"

  - name: Send Discord notification
    env:
      DISCORD_WEBHOOK: ${{ inputs.DISCORD_WEBHOOK }}
    uses: Ilshidur/action-discord@master
    if: ${{ fromJSON(inputs.DRYRUN) == false }}
    with:
      args: |
        ðŸ’œ New image: `${{ steps.packer.outputs.image_stamp }}`
        [Download](${{ steps.packer.outputs.image_url }})
        [Release Page](${{ steps.release.url }})
        [Manifest](${{ steps.packer.outputs.manifest_url }})
        [Checksum](${{ steps.packer.outputs.checksum_url }})
