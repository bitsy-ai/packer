name: 'Build image'
description: 'Build image from Packer template'
inputs:
  image_name:
    description: 'Name of image'
    required: true
  ansible_playbook:
    required: false
    default: ""
  ansible_extra_vars:
    description: 'Ensure ansible extra vars created'
    required: true
  packer_var_file:
    description: 'Path to vars/*.pkrvars.hcl file'
    required: true
  packer_template_file:
    description: 'Path to templates/*.hcl template to build'
    required: true
  gpg_sign_key:
    required: true
  gpg_passphrase:
    required: true
  gog_keyserver:
    default: https://github.com/leigh-johnson.gpg
  gpg_author_fingerprint:
    default: E359E824041B36D7
  gpg_project_fingerprint:
    default: 5B656A39DDA22020
  gpg_subkey_fingerprint
    default: 9E3B2AB15DB076E4
  dryrun:
    description: 'Skip ansible run'
    default: 'false'
  
  artifact_name:
    description: 'Optional artifact to use as base image'
    default: ''
    required: false
  artifact_workflow:
    description: 'Optional artifact to use as base image'
    default: ''
    required: false

outputs:
  artifact:
    description: "Reference to artifact name to be used in subsequent steps"
    value: ${{ inputs.IMAGE_NAME }}
  image_path:
    description: "Desired cdn upload path"
    value: ${{ steps.manifest.outputs.image_path }}

runs:
  using: "composite"
  steps:
  - name: Ensure ansible_extra_vars on disk
    shell: bash
    run: make ${{ inputs.ANSIBLE_EXTRA_VARS }}
  - name: Download source artifact
    if: ${{ inputs.artifact_name != '' }}
    uses: dawidd6/action-download-artifact@v2
    with:
      workflow: build-printnanny-base.yml
      workflow_conclusion: success
      name: ${{ inputs.artifact_name }}
      path: src
  - name: Unpack source artifact and set packer vars
    if: ${{ inputs.artifact_name != '' }}
    shell: bash
    run: |
      ls -ahl src/
      tar -zxvf src/artifact.tar.gz -C src/
      echo ::set-output name=base_image_checksum::"$(cat src/sha256.checksum | cut -d $'\t' -f 1)"
      echo ::set-output name=base_image_file::"$(cat src/manifest.json| jq '.builds[0].files[0].name' -r)"
      echo ::set-output name=base_image_stamp::"$(cat src/manifest.json| jq '.builds[0].custom_data.image_stamp' -r)"

      echo "base_image_name=\"file:/build/src/$(cat src/manifest.json| jq '.builds[0].custom_data.image_name' -r)\"" >> ${{ inputs.PACKER_VAR_FILE }}
      echo "base_image_url=\"file:/build/src/$(cat src/manifest.json| jq '.builds[0].files[0].name' -r)\"" >> ${{ inputs.PACKER_VAR_FILE }}
      echo "base_image_stamp=\"file:/build/src/$(cat src/manifest.json| jq '.builds[0].custom_data.image_stamp' -r)\"" >> ${{ inputs.PACKER_VAR_FILE }}
      echo "base_image_checksum=\"$(cat src/sha256.checksum | cut -d $'\t' -f 1)\"" >> ${{ inputs.PACKER_VAR_FILE }}
      cat ${{ inputs.PACKER_VAR_FILE }}
  - name: (dryrun) Make image from Packer template
    shell: bash
    run: |
      cat ${{ inputs.PACKER_VAR_FILE }}
      make packer-build PACKER_CMD='build --timestamp-ui -var "image_name=${{ inputs.IMAGE_NAME }}" -var "playbook_file=${{ inputs.ANSIBLE_PLAYBOOK }}" -var-file ${{ inputs.PACKER_VAR_FILE }} ${{ inputs.PACKER_TEMPLATE_FILE }}'
    if: ${{ inputs.dryrun == 'false' }}
  - name: Make image from Packer template
    shell: bash
    run: |
      cat ${{ inputs.PACKER_VAR_FILE }}
      make packer-build PACKER_CMD='build --timestamp-ui -var "image_name=${{ inputs.IMAGE_NAME }}" -var "playbook_file=playbooks/dryrun.yml" -var "dryrun=true" -var-file ${{ inputs.PACKER_VAR_FILE }} ${{ inputs.PACKER_TEMPLATE_FILE }}'
    if: ${{ inputs.dryrun == 'true' }}

  - name: Create env.sh
    id: manifest
    shell: bash
    run: |
      ./tools/manifest-to-env.sh
      echo ::set-output name=image_path::"$(cat dist/manifest.json| jq '.builds[0].custom_data.image_path' -r)"
  - name: Receive author key
    shell: bash
    run: |
      gpg --keyserver ${{ inputs.GPG_KEYSERVER }} --keyserver-options no-self-sigs-only --recv-keys ${{ inputs.GPG_PROJECT_FINGERPRINT }} ${{ inputs.GPG_AUTHOR_FINGERPRINT }}
      echo "${{ inputs.gpg_sign_key }}" | gpg --batch --allow-secret-key-import --import
  - name: Sign the release
    shell: bash
    run: |
      echo ${{ inputs.GPG_PASSPHRASE }} | gpg --pinentry-mode loopback --batch --yes --passphrase-fd 0 --detach-sig -u ${{ inputs.GPG_SUBKEY_FINGERPRINT }} dist/sha256.checksum
  - name: Set outputs from env.sh
    shell: bash
    run: |
      . dist/env.sh
      echo ::set-output name=image_path::"$IMAGE_PATH"    
      ls -ahl dist/
  - name: Create tarball
    shell: bash
    run: |
        tar -C dist/ -czvf artifact.tar.gz .
  - uses: actions/upload-artifact@v2
    with:
      name: ${{ inputs.IMAGE_NAME }}
      path: artifact.tar.gz
